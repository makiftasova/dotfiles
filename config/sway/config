# Default config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4

# use swaylock for locking screen.
# it uses config file from '$XDG_CONFIG_HOME/swaylock/config' by default
# (see 'man swaylock')
set $lock swaylock -f

# set keybind for locking screen
bindsym $mod+l exec $lock

# setup swayidle to lock screen after set amount of time
# swayidle will use config file at $XDG_CONFIG_HOME/swayidle/config by default.
exec swayidle -w

# set terminal
set $term kitty

# set sway config dir
set $config_dir $HOME/.config/sway
set $local_config_dir $HOME/.local/config/sway

# set background
output * bg  /usr/share/backgrounds/sway/Sway_Wallpaper_Blue_1920x1080.png fill

focus_follows_mouse no
# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
bindsym $mod+Return exec $term

# kill focused window
bindsym $mod+Shift+q kill

set $menu wofi --show run --localtion 0 --allow-images --insensitive
# start app launcher
bindsym $mod+d exec $menu

# change focus
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+h split h

# split in vertical orientation
bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle all

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+p focus parent

# focus the child container
bindsym $mod+c focus child

# switch to workspace
bindsym $mod+1 workspace 1
bindsym $mod+2 workspace 2
bindsym $mod+3 workspace 3
bindsym $mod+4 workspace 4
bindsym $mod+5 workspace 5
bindsym $mod+6 workspace 6
bindsym $mod+7 workspace 7
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9
bindsym $mod+0 workspace 10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace 1
bindsym $mod+Shift+2 move container to workspace 2
bindsym $mod+Shift+3 move container to workspace 3
bindsym $mod+Shift+4 move container to workspace 4
bindsym $mod+Shift+5 move container to workspace 5
bindsym $mod+Shift+6 move container to workspace 6
bindsym $mod+Shift+7 move container to workspace 7
bindsym $mod+Shift+8 move container to workspace 8
bindsym $mod+Shift+9 move container to workspace 9
bindsym $mod+Shift+0 move container to workspace 10

# Audio controls
bindsym XF86AudioRaiseVolume exec pactl set-sink-volume 0 +5% #increase sound volume
bindsym XF86AudioLowerVolume exec pactl set-sink-volume 0 -5% #decrease sound volume
bindsym XF86AudioMute exec pactl set-sink-mute 0 toggle # mute sound

# Sreen brightness controls
bindsym --locked XF86MonBrightnessDown exec brightnessctl set 5%-
bindsym --locked XF86MonBrightnessUp exec brightnessctl set 5%+

# Media player controls
bindsym XF86AudioPlay exec playerctl play
bindsym XF86AudioPause exec playerctl pause
bindsym XF86AudioNext exec playerctl next
bindsym XF86AudioPrev exec playerctl previous

# set base command for grim
set $grim grim -t png

# take screenshot of all outputs
bindsym --no-repeat $mod+Print exec $grim

# take screenshot of focused window
bindsym --no-repeat $mod+Control+Print exec \
	swaymsg -rt get_tree | \
	jq -j '.. | select(.type?) | select(.focused).rect | \"\(.x),\(.y) \(.width)x\(.height)\"' | \
	$grim -g -

# take screenshot of focused output
bindsym --no-repeat $mod+Mod1+Print exec $grim -o $(swaymsg -rt get_outputs | jq -r '.[] | select(.focused) | .name')

# take screenshot of selected region
bindsym --no-repeat $mod+Shift+Print exec slurp | $grim -g -

# reload the configuration file
bindsym $mod+Shift+c reload

set $sysmenu "[L]ock l[O]gout [P]oweroff [R]eboot [S]uspend"
mode $sysmenu {
	bindsym $mod+l exec $lock, mode "default"
	bindsym $mod+o exit, mode "default"
	bindsym $mod+p exec systemctl poweroff, mode "default"
	bindsym $mod+r exec systemctl reboot, mode "deafult"
	bindsym $mod+s exec systemctl suspend, mode "default"
	bindsym Escape mode "default"
	bindsym Return mode "default"
}
bindsym $mod+Shift+e mode $sysmenu


# resize window (you can also use the mouse for that)
mode "resize" {
	# These bindings trigger as soon as you enter the resize mode

	# Pressing left will shrink the window’s width.
	# Pressing right will grow the window’s width.
	# Pressing up will shrink the window’s height.
	# Pressing down will grow the window’s height.
	bindsym Left resize shrink width 10 px or 10 ppt
	bindsym Down resize grow height 10 px or 10 ppt
	bindsym Up resize shrink height 10 px or 10 ppt
	bindsym Right resize grow width 10 px or 10 ppt

	# back to normal: Enter or Escape
	bindsym Return mode "default"
	bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"

bindsym $mod+Control+Left move workspace to output left
bindsym $mod+Control+Down move workspace to output down
bindsym $mod+Control+Up move workspace to output up
bindsym $mod+Control+Right move workspace to output right

# passthrough mode to allow using $mod in any window's shortcuts.
# useful for things like VNC
mode "passthrough" {
	bindsym $mod+Pause mode default
}
bindsym $mod+Pause mode "passthrough"

#
# Scratchpad:
#
# Sway has a "scratchpad", which is a bag of holding for windows.
# You can send windows there and get them back later.

# Move the currently focused window to the scratchpad
bindsym $mod+Shift+minus move scratchpad

# Show the next scratchpad window or hide the focused scratchpad window.
# If there are multiple scratchpad windows, this command cycles through them.
bindsym $mod+minus scratchpad show

# set keyboard layouts
input type:keyboard {
	xkb_layout us,tr
	xkb_options grp:win_space_toggle
	xkb_numlock enabled
	xkb_capslock disabled
}

# enable natural_scroll for pointer devices
input type:pointer {
	natural_scroll enabled
}

# enable tap and natural_scroll for touchpads
input type:touchpad {
	natural_scroll enabled
	tap enabled
}

# use no window borders by default. can be overridden in local config below
default_border none
default_floating_border none

# use default border settings for kitty.
for_window [app_id="kitty"] border normal 2

# inhibit idle when firefox is fullscreen
for_window [app_id="firefox"] inhibit_idle fullscreen

# export Wayland display info for gtk applications
# https://github.com/swaywm/sway/wiki#gtk-applications-take-20-seconds-to-start
exec dbus-update-activation-environment --systemd DISPLAY WAYLAND_DISPLAY SWAYSOCK XDG_CURRENT_DESKTOP=sway

# start xdg-desktop-portal for screen capture etc.
exec /usr/lib/xdg-desktop-portal -r

# start kde-connect
exec kdeconnect-indicator

# Start gammastep
exec gammastep -m wayland -l 41.0082:28.9784

# start mako notification daemon
exec mako

# start gnome polkit authentication agent
exec /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1

# setup keybonds to dismiss mako notifications
# TODO: find better keybinds
bindsym $mod+Control+Space exec makoctl dismiss
bindsym $mod+Control+Shift+Space exec makoctl dismiss --all

# Start waybar to display a workspace bar (plus the system information waybar
# finds out, if available)
# bar {
# 	position top
# 	swaybar_command waybar
# }

# Start swaybar
bar {
	position top
	font "Terminus (TTF)"
	status_command while $config_dir/sway_bar.sh; do sleep 1; done

	colors {
		statusline #FFFFFF
		background #000000
		active_workspace #767676 #767676 #FFFFFF
		inactive_workspace #323232 #323232 #676767
	}
}

# setup display outputs
include $local_config_dir/outputs

# include local config
include $local_config_dir/config

