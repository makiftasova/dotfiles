function tex_to_pdf {
	pdflatex $1
}

function md_to_pdf {
	pandoc -o "$1.pdf" "$1"
}

function dmalloc {
	eval `command dmalloc -b $*`;
}

function mkcd {
	mkdir -p "$1" && cd "$1"
}

function mdnote {
	$EDITOR "$1_$(date +%F).md"
}

function ftar {
	tar cvf "$1.tar" "$1"
}

function fid {
	local _dir
	local _name
	local _params
	local _cmd_ret=0

	if [ "$#" -eq "0" ]
	then
		_cmd_ret=0

	elif [ "$#" -le "2" ]
	then
		if [ "$#" -eq "1" ]
		then
			_dir="."
			_name="$1"
		else
			_dir="$1"
			_name="$2"
		fi
		find "$_dir" -name "$_name"
		_cmd_ret=$?

	else
		_dir="$1"
		_name="$2"
		_params="${@:3}"
		find "$_dir" "$_params" -name "$_name"
		_cmd_ret=$?
	fi

	return $_cmd_ret
}

function grep_libdep {
	local _pattern="$1"
	local _needle="$2"

	for f in $(fid . "$_pattern"); do
		echo "===== FILE: \"$f\" =====";
		readelf -a "$f" | grep "$_needle";
	done
	echo "==== DONE ====";
}

function grep_symbols {
	local _pattern="$1"
	local _needle="$2"

	for f in $(fid . "$_pattern"); do
		echo "===== FILE: \"$f\" =====";
		nm -alC "$f" | grep "$_needle";
	done
	echo "===== DONE =====";
}

function sizeof {
	local _dir=$(readlink -f "$1")
	local _root=$(pwd)

	cd "$_dir"
	# echo "$_dir"
	du -csh ./*
	cd "$_root"
}

function repo_rinse {
	git clean -xfd
	git submodule foreach --recursive git clean -xfd
	git reset --hard
	git submodule foreach --recursive git reset --hard
	git submodule update --init --recursive
}

function repo_prune {
	local _cwd=$(pwd)

	if [ "$#" -ne "0" ]
	then
		cd "$1"
	fi

	git remote prune origin

	if [ "$#" -ne "0" ]
	then
		cd "$_cwd"
	fi
}

function git_refs_gc {
	local __pwd="$(pwd)"
	local __refs_path="$(git config --global references.path)"
	for d in $(ls -l "$__refs_path" | grep '^d' | awk '{ print $9 }'); do
		cd "$__refs_path/$d";
		echo "git gc for repository $d";
		git gc;
	done
	cd "$__pwd" ;
}

[ -f "$ZSH_CONFIG_LOCAL_HOME/zsh_funcs" ] && source "$ZSH_CONFIG_LOCAL_HOME/zsh_funcs"
