# find absolute path for given executable in PATH.
# omits shell builtins, shell functions and shell aliases while searching.
function find_exec_in_path {
	# $1 is executable name
	# shellcheck disable=SC2230  # using `command -v` here makes things more diffucult
	which -a "$1" | grep -e "^/" | head -1
}

# wrapper for ed(1) to change ed's prompt.
function ed {
	local __exec
	local __prompt="$ED_PROMPT"

	__exec=$(find_exec_in_path "ed")

	if [ -z "$__exec" ] ; then
		echo "ed not found in PATH";
		return 255;
	fi
	if [ -z "$__prompt" ] ; then
		__prompt="ed> "
	fi
	eval "$__exec" "-p" "\"$__prompt\"" "$@"
}

function tex_to_pdf {
	pdflatex "$1"
}

# convert given markdown file into a pdf document
function md_to_pdf {
	pandoc --pdf-engine=pdflatex -V geometry:"top=2cm, bottom=1.5cm, left=2.cm, right=2cm" -o "$1.pdf" "$1"
}

function mdown {
	mdv -c 80 "$1"
}

# make a new directory and cd into it
function mkcd {
	mkdir -p "$1" && cd "$1" || return 255
}

# create a new markdown note with name "$NAME_$DATE.md"
function mdnote {
	if [ "$#" != "1" ]; then
		return 255;
	fi
	$EDITOR "$1_$(date +%F).md"
}

# archive given directory in a tar archive
function ftar {
	tar cvf "$1.tar" "$1"
}

# archive given directory in a tar.gz archive
function ftargz {
	tar cvzf "$1.tar.gz" "$1"
}

# search recursively for files with given extension in given directory and
# add them into a tar.gz archive
function ftargz_ext {
	local PATTERN="$1"
	local DIR="$2"
	local OUTP

	if [ -z "$DIR" ]; then
		DIR="."
	fi

	OUTP="$(basename "$(readlink -f $DIR)").tar.gz"

	find "$DIR" -name "$PATTERN" -exec tar cvzf "$OUTP" {} +
}

function fid {
	local __dir
	local __name

	if [ "$#" -eq "0" ]; then
		return 0;
	fi

	if [ "$#" -eq "1" ]; then
		__dir="."
		__name="$1"
	else
		__dir="$1"
		__name="$2"
	fi

	find "$__dir" -name "$__name" "${@:3}"
}

function grep_libdep {
	local _pattern="$1"
	local _needle="$2"

	for f in $(fid . "$_pattern"); do
		echo "===== FILE: \"$f\" =====";
		readelf -a "$f" | grep "$_needle";
	done
	echo "==== DONE ====";
}

function grep_symbols {
	local _pattern="$1"
	local _needle="$2"

	for f in $(fid . "$_pattern"); do
		echo "===== FILE: \"$f\" =====";
		nm -alC "$f" | grep "$_needle";
	done
	echo "===== DONE =====";
}

function sizeof {
	local __dir
	local __root

	__dir=$(readlink -f "$1")
	__root=$(pwd)

	cd "$__dir" || return 255
	du -csh ./*
	cd "$__root" || return 255
}

# revert git repository into fresh state.
# * removes all out of tree files
# * reset git repo to HEAD
# * resets all submodules into their respective HEAD's
# * update all submodules
function repo_rinse {
	git clean -xfd
	git submodule foreach --recursive git clean -xfd
	git reset --hard
	git submodule foreach --recursive git reset --hard
	git submodule update --init --recursive
}

function git_gc_prune_all {
	local dname
	for dir in $(find "$(pwd)" -name ".git" -type d -print0 | xargs -0 -I{} echo {}); do
		dname="$(dirname "$dir")";
		echo "processing $dname";
		git -C "$dname" gc --aggressive --prune=all;
	done
}

function repo_prune {
	local __cwd
	__cwd=$(pwd)

	if [ "$#" -ne "0" ]; then
		cd "$1" || return 255;
	fi

	git remote prune origin

	if [ "$#" -ne "0" ]; then
		cd "$__cwd" || return 255;
	fi
}

# run given command until it fails the print it stdout and stderr outputs of
# its failure followed by number of runs it takes until command fails.
function run_until_fails {
	local CMD="$*"
	local COUNTER=0

	local SOUT
	local SERR

	SOUT=$(mktemp)
	SERR=$(mktemp)

	while "$CMD" >"$SOUT" 2>"$SERR"; do
		COUNTER=$((COUNTER + 1))
	done

	cat "$SOUT"
	cat "$SERR"

	echo "[INF] $CMD failed after $COUNTER attempts."

	rm -f "$SOUT" "$SERR"
}

function gif_to_mp4 {
	if [ -z "$(command -v ffmpeg)" ]; then
		echo "ffmpeg not found!";
		return 255;
	fi
	local inp="$1";
	local out="${inp%.*}.mp4"
	echo "$out"
	ffmpeg -i "$inp" -movflags faststart -pix_fmt yuv420p -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" "$out"

}

# shellcheck source=/dev/null
[ -f "$ZSH_CONFIG_LOCAL_HOME/zsh_funcs" ] && source "$ZSH_CONFIG_LOCAL_HOME/zsh_funcs"
