#!/usr/bin/env python3

"""
Simple sript to generate ffmpeg command for embedding subtitles.

Run with -h or --help to see usage.
"""

import argparse
import os
import subprocess
import sys

__author__ = "Mehmet Akif Tasova"
__copyright__ = "Copyright 2022, Mehmet Akif Tasova"
__credits__ = ["Mehmet Akif Tasova"]
__license__ = "GPL"
__version__ = "1.2.1"
__maintainer__ = "Mehmet Akif Tasova"
__email__ = "makiftasova@gmail"
__status__ = "Production"


def quote_string(string: str) -> str:
    """
    Put given string into single quotes if necessary.

    e.g. turn `my string` into `'my string'`
    """
    if not string.startswith("'"):
        string = f"'{string}"

    if not string.endswith("'"):
        string = f"{string}'"

    return string


def parse_arguments() -> dict:
    """Parse command line arguments and retun a dictory of them.

    If no command line arguments are given, this function will return an empty
    dictionary object.

    example retun value:
    {
     'cmd': 'ffmpeg',
     'input': 'test.mp4',
     'output': 'out.mp4',
     'quiet': False,
     'run': False,
     'subs': [
               {
                'file': 'test.srt',
                'lang': 'eng',
                'title': 'English'
               },
               {
                'file': 'test2.srt',
                'lang': 'eng',
                'title': "'English SDH'"
               }
              ]
    }
    """
    parser = argparse.ArgumentParser(
        description="Generate ffmpeg command to embed subtitles"
    )
    parser.add_argument(
        "-i",
        "--input",
        dest="input",
        type=str,
        required=True,
        help="input file to embed subtitles",
    )
    parser.add_argument(
        "-o",
        "--output",
        dest="output",
        type=str,
        required=True,
        help="output file to put results",
    )
    parser.add_argument(
        "-s",
        "--sub",
        dest="subs",
        action="append",
        nargs=3,
        metavar=("LANG", "TITLE", "FILE"),
        help="subtitle info in 'lang_code title file_path'"
        " format. e.g. '--sub eng English english.srt'",
    )
    parser.add_argument(
        "-c",
        "--command",
        type=str,
        default="ffmpeg",
        dest="cmd",
        help="ffmpeg command to run. e.g. 'ffmpeg', or '/usr/bin/ffmpeg'",
    )
    parser.add_argument(
        "-q",
        "--quiet",
        default=False,
        dest="quiet",
        action="store_true",
        help="Do not print anything to stdout or stderr",
    )
    parser.add_argument(
        "-r",
        "--run",
        default=False,
        dest="run",
        action="store_true",
        help="Also run ffmpeg command after constructing it",
    )
    parser.add_argument(
        "-t",
        "--title",
        dest="title",
        type=str,
        help="Overwrite file title metadata with given one",
    )
    parser.add_argument(
        "-a",
        "--audio",
        dest="audio",
        type=str,
        help="Overwrite audio stream language with given one",
        action="append",
        nargs=2,
        metavar=("STREAM_NO", "LANG"),
    )

    if len(sys.argv) < 2:
        parser.print_help()
        return {}

    _args = vars(parser.parse_args())

    # clean-up subtitle related arguments
    subs = _args.pop("subs")
    if subs:
        _args["subs"] = []
        for sub in subs:
            _args["subs"].append(
                {"lang": sub[0], "title": sub[1], "file": sub[2]})

    # clean-up audio metadata stuff
    audios = _args.pop("audio")
    if audios:
        _args["audio"] = []
        for audio in audios:
            _args["audio"].append(
                {"stream_number": int(audio[0]), "lang": audio[1]})
    return _args


def get_sub_codec(fmt: str) -> str:
    """
    Get subtitle codec compatible with given file extension or ffmpeg format
    name.
    """
    # ffmpeg subtitle codec flags
    # Not all media containers support all the subtitle formats.
    # We are using 'mov_text' if output container is '.mp4' and 'srt' if output
    # container is '.mkv'. See below dict for for all supported containers and
    # subtitle codecs
    sub_codecs = {
        ".mp4": "mov_text",
        ".mp4'": "mov_text",
        ".mkv": "srt",
        ".mkv'": "srt",
        "matroska": "srt",
    }

    if fmt in sub_codecs:
        return sub_codecs[fmt]
    sys.exit(f"Unknown format {fmt}")


def prepare_ffmpeg_cmdline(arguments: dict, with_run: bool = False) -> list:
    """
    Return ffmpeg comman line as a list.

    This list can be used as an argument for `subprocess.run()`.

    example return value:
    [
     'ffmpeg',
     '-i',
     'test.mp4',
     '-i',
     'test.srt',
     '-i',
     'test2.srt',
     '-c',
     'copy',
     '-c:s',
     'mov_text',
     '-metadata:s:s:0',
     'language=eng',
     '-metadata:s:s:0',
     'title=English',
     '-metadata:s:s:0',
     'handler_name=English',
     '-metadata:s:s:1',
     'language=eng',
     '-metadata:s:s:1',
     "title='English SDH'",
     '-metadata:s:s:1',
     "handler_name='English SDH'",
     'out.mp4'
    ]
    """
    have_audio = "audio" in arguments and len(arguments["audio"]) > 0
    have_subs = "subs" in arguments and len(arguments["subs"]) > 0
    have_title = "title" in arguments and len(arguments["title"]) > 0

    # handle shell quoting before we begin doing stuff
    # we don't need to fix quoting if we are going to run ffmpeg ourselves
    if with_run is False:
        arguments["input"] = quote_string(arguments["input"])
        arguments["output"] = quote_string(arguments["output"])
        if have_subs:
            for sub in arguments["subs"]:
                sub["file"] = quote_string(sub["file"])
                sub["title"] = quote_string(sub["title"])
        if have_title:
            arguments["title"] = quote_string(arguments["title"])

    # construct a list of input files
    input_files = [arguments["input"]]
    if have_subs:
        for sub in arguments["subs"]:
            input_files.append(sub["file"])

    # ffmpeg command, usually 'ffmpeg' is enough
    _cmdline = [arguments["cmd"]]

    # pass list of input files first
    for file in input_files:
        _cmdline.append("-i")
        _cmdline.append(file)

    # select all streams from input file
    _cmdline.append("-map")
    _cmdline.append("0")

    # copy audio and video stream(s) as is
    _cmdline.append("-c:a")
    _cmdline.append("copy")
    _cmdline.append("-c:v")
    _cmdline.append("copy")

    # set sutitle codec depending on output format
    _cmdline.append("-c:s")
    _cmdline.append(get_sub_codec(os.path.splitext(arguments["output"])[1]))

    # clean-up unnecessary metadata
    _cmdline.append("-map_metadata")
    _cmdline.append("-1")

    # overwrite file's title metadata if user requested
    if have_title:
        _cmdline.append("-metadata")
        _cmdline.append(f"title={arguments['title']}")

    # overwrite audio metadata if user requested
    if have_audio:
        for audio in arguments["audio"]:
            _cmdline.append(f"-metadata:s:a:{audio['stream_number']}")
            _cmdline.append(f"language={audio['lang']}")

    if have_subs:
        for sub_index, sub in enumerate(arguments["subs"]):
            input_index = input_files.index(sub["file"])
            _cmdline.append("-map")
            _cmdline.append(f"{sub_index+1}")
           # add metadata(s) for subtitles
            _cmdline.append(f"-metadata:s:s:{sub_index}")
            _cmdline.append(f"language={sub['lang']}")
            _cmdline.append(f"-metadata:s:s:{sub_index}")
            _cmdline.append(f"title={sub['title']}")
            _cmdline.append(f"-metadata:s:s:{sub_index}")
            _cmdline.append(f"handler_name={sub['title']}")

    _cmdline.append(arguments["output"])
    return _cmdline


if __name__ == "__main__":
    args = parse_arguments()
    if not args:
        sys.exit(-1)

    ffmpeg_cmdline = prepare_ffmpeg_cmdline(args, bool(args["run"]))

    if not args["quiet"]:
        print(" ".join(ffmpeg_cmdline))

    if args["run"]:
        if not args["quiet"]:
            print("Running ffmpeg command")
        subprocess.run(ffmpeg_cmdline, check=True)
